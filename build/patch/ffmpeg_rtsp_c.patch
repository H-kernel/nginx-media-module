--- libavformat/rtsp.c	2016-10-28 00:17:40.000000000 +0800
+++ ../../patch/ffmpeg/libavformat/rtsp.c	2016-12-04 20:41:58.055069838 +0800
@@ -2124,6 +2124,12 @@
 #if CONFIG_RTSP_DEMUXER
     case RTSP_LOWER_TRANSPORT_TCP:
         len = ff_rtsp_tcp_read_packet(s, &rtsp_st, rt->recvbuf, RECVBUF_SIZE);
+        /** add by H.Kernel 2016-05-09 for huawei rtsp server
+         * Send the rtcp with tcp ,over rtsp
+         */
+         if (len > 0 && rtsp_st->transport_priv && rt->transport == RTSP_TRANSPORT_RTP)
+            ff_rtsp_check_and_send_back_rr(rtsp_st->transport_priv, rt->rtsp_hd, NULL,rtsp_st->interleaved_max,len);
+         /** add by H.Kernel 2016-05-09 for huawei rtsp server*/
         break;
 #endif
     case RTSP_LOWER_TRANSPORT_UDP:
@@ -2376,6 +2382,126 @@
     .priv_class     = &sdp_demuxer_class,
 };
 #endif /* CONFIG_SDP_DEMUXER */
+/** add by H.Kernel 2016-05-09 for huawei rtsp server
+ * Send the rtcp with tcp ,over rtsp
+ */
+int ff_rtsp_check_and_send_back_rr(RTPDemuxContext *s, URLContext *fd,
+                                  AVIOContext *avio,int interleaved, int count)
+{
+    AVIOContext *pb;
+    uint8_t *buf;
+    int len;
+    int rtcp_bytes;
+    RTPStatistics *stats = &s->statistics;
+    uint32_t lost;
+    uint32_t extended_max;
+    uint32_t expected_interval;
+    uint32_t received_interval;
+    int32_t  lost_interval;
+    uint32_t expected;
+    uint32_t fraction;
+
+    if ((!fd && !avio) || (count < 1))
+        return -1;
+
+    /* TODO: I think this is way too often; RFC 1889 has algorithm for this */
+    /* XXX: MPEG pts hardcoded. RTCP send every 0.5 seconds */
+    s->octet_count += count;
+    rtcp_bytes = ((s->octet_count - s->last_octet_count) * RTCP_TX_RATIO_NUM) /
+        RTCP_TX_RATIO_DEN;
+    rtcp_bytes /= 50; // mmu_man: that's enough for me... VLC sends much less btw !?
+    if (rtcp_bytes < 28)
+        return -1;
+    s->last_octet_count = s->octet_count;
+
+    if (!fd)
+        pb = avio;
+    else if (avio_open_dyn_buf(&pb) < 0)
+        return -1;
+
+    /* The interleaving header is exactly 4 bytes, which happens to be
+         * the same size as the packet length header from
+         * ffio_open_dyn_packet_buf. So by writing the interleaving header
+         * over these bytes, we get a consecutive interleaved packet
+         * that can be written in one call. */
+    avio_w8(pb, '$');
+    avio_w8(pb, interleaved);
+    avio_wb16(pb, 8);
+
+    // Receiver Report
+    avio_w8(pb, (RTP_VERSION << 6) + 1); /* 1 report block */
+    avio_w8(pb, RTCP_RR);
+    avio_wb16(pb, 7); /* length in words - 1 */
+    // our own SSRC: we use the server's SSRC + 1 to avoid conflicts
+    avio_wb32(pb, s->ssrc + 1);
+    avio_wb32(pb, s->ssrc); // server SSRC
+    // some placeholders we should really fill...
+    // RFC 1889/p64
+    extended_max          = stats->cycles + stats->max_seq;
+    expected              = extended_max - stats->base_seq;
+    lost                  = expected - stats->received;
+    lost                  = FFMIN(lost, 0xffffff); // clamp it since it's only 24 bits...
+    expected_interval     = expected - stats->expected_prior;
+    stats->expected_prior = expected;
+    received_interval     = stats->received - stats->received_prior;
+    stats->received_prior = stats->received;
+    lost_interval         = expected_interval - received_interval;
+    if (expected_interval == 0 || lost_interval <= 0)
+        fraction = 0;
+    else
+        fraction = (lost_interval << 8) / expected_interval;
+
+    fraction = (fraction << 24) | lost;
+
+    avio_wb32(pb, fraction); /* 8 bits of fraction, 24 bits of total packets lost */
+    avio_wb32(pb, extended_max); /* max sequence received */
+    avio_wb32(pb, stats->jitter >> 4); /* jitter */
+
+    if (s->last_rtcp_ntp_time == AV_NOPTS_VALUE) {
+        avio_wb32(pb, 0); /* last SR timestamp */
+        avio_wb32(pb, 0); /* delay since last SR */
+    } else {
+        uint32_t middle_32_bits   = s->last_rtcp_ntp_time >> 16; // this is valid, right? do we need to handle 64 bit values special?
+        uint32_t delay_since_last = av_rescale(av_gettime_relative() - s->last_rtcp_reception_time,
+                                               65536, AV_TIME_BASE);
+
+        avio_wb32(pb, middle_32_bits); /* last SR timestamp */
+        avio_wb32(pb, delay_since_last); /* delay since last SR */
+    }
+
+    // CNAME
+    avio_w8(pb, (RTP_VERSION << 6) + 1); /* 1 report block */
+    avio_w8(pb, RTCP_SDES);
+    len = strlen(s->hostname);
+    avio_wb16(pb, (7 + len + 3) / 4); /* length in words - 1 */
+    avio_wb32(pb, s->ssrc + 1);
+    avio_w8(pb, 0x01);
+    avio_w8(pb, len);
+    avio_write(pb, s->hostname, len);
+    avio_w8(pb, 0); /* END */
+    // padding
+    for (len = (7 + len) % 4; len % 4; len++)
+        avio_w8(pb, 0);
+
+    len = avio_tell(pb);
+    /* Update size */
+    avio_seek(pb, 2, SEEK_SET);
+    avio_wb16(pb, len-4);
+    avio_seek(pb, len, SEEK_SET);
+
+    avio_flush(pb);
+    if (!fd)
+        return 0;
+    len = avio_close_dyn_buf(pb, &buf);
+    if ((len > 0) && buf) {
+        int av_unused result;
+        av_log(s->ic, AV_LOG_TRACE, "sending %d bytes of RR\n", len);
+        result = ffurl_write(fd, buf, len);
+        av_log(s->ic, AV_LOG_TRACE, "result from ffurl_write: %d\n", result);
+        av_free(buf);
+    }
+    return 0;
+}
 
 #if CONFIG_RTP_DEMUXER
 static int rtp_probe(AVProbeData *p)
