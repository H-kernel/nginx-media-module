--- libavformat/hlsenc.c	2016-10-28 00:17:40.000000000 +0800
+++ ../../patch/ffmpeg/libavformat/hlsenc.c	2016-12-04 20:41:58.023069838 +0800
@@ -133,6 +133,145 @@
     double initial_prog_date_time;
 } HLSContext;
 
+/** add by H.Kernel 2016-05-09
+ * for clear the hls cache
+ */
+
+static void hls_delete_all_segments(HLSContext *hls){
+    HLSSegment *segment, *previous_segment = NULL;
+    int path_size, sub_path_size;
+    char *dirname = NULL, *p, *sub_path;
+    char *path = NULL;
+
+    if (!(hls->flags & HLS_DELETE_SEGMENTS)) {
+        return;
+    }
+
+
+    /* delete the m3u8 file*/
+    /*
+    if( hls->vtt_m3u8_name ) {
+        if (unlink(hls->vtt_m3u8_name) < 0) {
+            av_log(hls, AV_LOG_ERROR, "failed to delete m3u8 file %s: %s\n",
+                                     hls->vtt_m3u8_name, strerror(errno));
+        }
+    }*/
+
+    /* delete the new segments*/
+    segment = hls->segments;
+
+    if (segment) {
+        if (hls->segment_filename) {
+            dirname = av_strdup(hls->segment_filename);
+        } else {
+            dirname = av_strdup(hls->avf->filename);
+        }
+        if (!dirname) {
+            goto fail;
+        }
+        p = (char *)av_basename(dirname);
+        *p = '\0';
+    }
+
+    while (segment) {
+        av_log(hls, AV_LOG_DEBUG, "deleting now segment %s\n",
+                                  segment->filename);
+        path_size = strlen(dirname) + strlen(segment->filename) + 1;
+        path = av_malloc(path_size);
+        if (!path) {
+            goto fail;
+        }
+
+        av_strlcpy(path, dirname, path_size);
+        av_strlcat(path, segment->filename, path_size);
+        if (unlink(path) < 0) {
+            av_log(hls, AV_LOG_ERROR, "failed to delete now segment %s: %s\n",
+                                     path, strerror(errno));
+        }
+
+        if (segment->sub_filename[0] != '\0') {
+            sub_path_size = strlen(dirname) + strlen(segment->sub_filename) + 1;
+            sub_path = av_malloc(sub_path_size);
+            if (!sub_path) {
+                goto fail;
+            }
+
+            av_strlcpy(sub_path, dirname, sub_path_size);
+            av_strlcat(sub_path, segment->sub_filename, sub_path_size);
+            if (unlink(sub_path) < 0) {
+                av_log(hls, AV_LOG_ERROR, "failed to delete now segment %s: %s\n",
+                                         sub_path, strerror(errno));
+            }
+            av_free(sub_path);
+        }
+        av_freep(&path);
+        previous_segment = segment;
+        segment = previous_segment->next;
+        av_free(previous_segment);
+    }
+
+    hls->segments = NULL;
+
+    /*delete old segments*/
+    segment = hls->old_segments;
+    if (segment) {
+        if (hls->segment_filename) {
+            dirname = av_strdup(hls->segment_filename);
+        } else {
+            dirname = av_strdup(hls->avf->filename);
+        }
+        if (!dirname) {
+            goto fail;
+        }
+        p = (char *)av_basename(dirname);
+        *p = '\0';
+    }
+
+    while (segment) {
+        av_log(hls, AV_LOG_DEBUG, "deleting old segment %s\n",
+                                  segment->filename);
+        path_size = strlen(dirname) + strlen(segment->filename) + 1;
+        path = av_malloc(path_size);
+        if (!path) {
+            goto fail;
+        }
+
+        av_strlcpy(path, dirname, path_size);
+        av_strlcat(path, segment->filename, path_size);
+        if (unlink(path) < 0) {
+            av_log(hls, AV_LOG_ERROR, "failed to delete old segment %s: %s\n",
+                                     path, strerror(errno));
+        }
+
+        if (segment->sub_filename[0] != '\0') {
+            sub_path_size = strlen(dirname) + strlen(segment->sub_filename) + 1;
+            sub_path = av_malloc(sub_path_size);
+            if (!sub_path) {
+                goto fail;
+            }
+
+            av_strlcpy(sub_path, dirname, sub_path_size);
+            av_strlcat(sub_path, segment->sub_filename, sub_path_size);
+            if (unlink(sub_path) < 0) {
+                av_log(hls, AV_LOG_ERROR, "failed to delete old segment %s: %s\n",
+                                         sub_path, strerror(errno));
+            }
+            av_free(sub_path);
+        }
+        av_freep(&path);
+        previous_segment = segment;
+        segment = previous_segment->next;
+        av_free(previous_segment);
+    }
+
+    hls->old_segments = NULL;
+
+fail:
+    av_free(path);
+    av_free(dirname);
+
+    return;
+}
 static int mkdir_p(const char *path) {
     int ret = 0;
     char *temp = av_strdup(path);
